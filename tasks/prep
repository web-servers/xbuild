#!/bin/sh
# Copyright(c) 2017 Red Hat, Inc.
#
# This is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library in the file COPYING.LIB;
# if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
#
# @author Mladen Turk
#
# Downloads entries from sources file
# in the current directory and uncopresses them to the
# RPM_SOURCE_DIR.
#
# Added:
# If Source points to directoy this dircetory is copied
# recursively to the source directory.
#

downloadsources()
{
    test -s sources || return 0
    IFS=$__lf
    if [ -s sources.$_os ]
    then
        s=`cat sources.$_os 2>/dev/null`
    else
        s=`cat sources 2>/dev/null`
    fi
    for i in $s
    do
        IFS=$__ifs
        (
            cd "$_sourcedir"
            h=`echo $i | $__awk '{print $1}'`
            p=`echo $i | $__awk '{print $2}'`
            case "$h" in
              git://* )
                b=`echo $i | $__awk '{print $3}'`
                n=`echo $i | $__awk '{print $4}'`
                if [ ".$n" = "." ]
                then
                  n=$name
                fi
                git clone -b $b --single-branch $h/$n $p
                test $? -ne 0 && xbexit 1 "failed to clone source module \`$h/$n'"
                rm -rf $p/.git 2>/dev/null || true
              ;;
              * )
                u=http://pkgs.devel.redhat.com/repo/pkgs/$name/$p/$h/$p
                if [ ! -s "$p" ]
                then
                  $ECHO "download: \`$u'"
                  wget --tries=0 --quiet $u
                  test $? -ne 0 && xbexit 1 "failed to download redhat module \`$u'"
                fi
                case "$p" in
                  *.tar.gz|*.tgz )
                    d=$__gzip
                  ;;
                  *.tar.bz2 )
                    d=$__bzip2
                  ;;
                  *.tar.lzma|*.xz )
                    d=$__xz
                  ;;
                  *.zip )
                    d=unzip
                  ;;
                  * )
                    xbexit 1 "cannot determine compression algorithm for \`$p'"
                  ;;
                esac
                if [ "$d" = "unzip" ]
                then
                  test ".$has_verbose" = .yes && v=-o || v=-oq
                  $ECHO "unzip $v $p"
                  unzip $v $p
                else
                  test ".$has_verbose" = .yes && v=-xvvf || v=-xf
                  $ECHO "$d -cd $p | $__tar $v -"
                  $d -cd $p | $__tar $v -
                fi
              ;;
            esac
        )
        test $? -ne 0 && xbexit 1 "failed to uncompress \`$p'"
    done
    return 0
}

copysources()
{
    $__tar -cf "$_sourcedir/x.tar" .
    (
        cd "$_sourcedir"
        $__tar -xf x.tar
        rm -f x.tar 2>/dev/null
        rm -rf .git 2>/dev/null
        rm -f .git* 2>/dev/null
        rm -f build.log 2>/dev/null
    )
    return 0
}

applypatches()
{
    IFS=$__lf
    c=`grep -i '^patch[0-9]*:' $specfile`
    for i in $c
    do
        p=`echo "$i" | $__sed 's/[pP]atch\([0-9]*\).*/\1/'`
        v=`echo "$i" | $__sed 's/\w*:[[:blank:]]*//'`
        r=`$__grep -e '^%patch'$p'[[:blank:]]' -e '%ifos ' -e '%ifnos ' -e '%endif'\
           $specfile | $__sed -e 's/[[:blank:]]*%//' -e 's/patch[0-9]*[[:blank:]]*//'`
        if [ ".$r" = "." ]
        then
            r="`$__grep '^%patch'$p'$' $specfile`"
            test ".$r" != . && r="-p 0"
        fi
        if [ ".$r" != "." ]
        then
            z=true
            for x in $r
            do
                case $x in
                    ifos* )
                        o=`echo $x | $__sed 's/ifos[[:blank:]]*//'`
                        test ".$o" != ".$_os" && z=false
                        continue
                    ;;
                    ifnos* )
                        o=`echo $x | $__sed 's/ifnos[[:blank:]]*//'`
                        test ".$o" = ".$_os" && z=false
                        continue
                    ;;
                    endif )
                        z=true
                        continue
                    ;;
                    -*    )
                        x="`echo $x | sed 's/\(.*\)\(\..*\)/\1 -z \2/'`"
                        test ".$has_verbose" = .no && x="-s $x"
                    ;;
                esac
                case $v in
                    *://* ) v=`basename $v` ;;
                    *%{*  ) v=`rpmeval $v`  ;;
                esac
                if ! $z; then
                    $ECHO "skipping $o patch \`$v'"
                    continue
                fi
                (
                    IFS=$__ifs
                    cd "$_sourcedir/$_source"
                    case "$x" in
                        -*  )
                            if [ -s "../$v" ]
                            then
                                $ECHO "applying patch: \`$v'"
                                patch $x < "../$v"
                                test $? -ne 0 && exit 1
                            else
                                $ECHO "missing patch: \`$v'"
                                exit 1
                            fi
                        ;;
                        *   )
                            eval "$x $v"
                        ;;
                    esac
                )
            done
        fi
    done
    return 0
}

copyosfiles()
{

    cd "$_sourcedir"
    for i in Makefile
    do
        test -r $i.$_os && cp -f $i.$_os $_source/$i
    done
}

configsources()
{
    $ECHO "source configure \`$_sourcedir/$_source'"
    (
        cd "$_sourcedir/$_source"
        for i in $name.${_os_c}conf $name.buildconf
        do
            if [ -s "$_sourcedir/$i" ]
            then
                . "$_sourcedir/$i"
                break
            fi
        done
        return 0
    )
    test $? -ne 0 && exit 1
    return 0
}

gensourceinfo()
{
    cat > /tmp/.zipinfo <<EOH
NAME:         $1
VERSION:      $version
RELEASE:      $release
SUMMARY:      $summary
DISTRIBUTION: Red Hat
VENDOR:       Red Hat, Inc.
LICENSE:      $license
PACKAGER:     Red Hat, Inc. <http://bugzilla.redhat.com/bugzilla>
GROUP:        $group
OS:           ${_os^}
ARCH:         noarch
URL:          $origin
TIMESTAMP:    `date -R`
COMPILER:     `ccversion`
CHANGELOG:
`changelog 1`
EOH

}

find_make_pid()
{
  ps -p $PPID -o ppid=
}

# Execute hooks
prep_prepare()
{
    if [ $_host_os = windows ]
    then
      # windows runs on a newly created VM no need to check for multi run or existing builds.
      newdir "$_xbrootdir"
      if [ -s sources ]
      then
          makedir "$_sourcedir"
      else
          makedir "$_sourcedir/$_source"
      fi
      return 0
    fi

    if [ ".$has_force" = .yes ]
    then
      newdir "$_xbrootdir"
    else
      # Check if another build is running.
      if [ -d "$_xbrootdir" ]
      then
        if [ -f "$_xbrootdir/pid" ]
        then
          MYPID=`cat $_xbrootdir/pid`
          ps -p $MYPID > /dev/null
          if [ $? -eq 0 ]
          then
            $ECHO "Another build is running. Remove $_xbrootdir if it is not."
            exit 1
          fi
        fi
      fi
      # Check if the build already exists
      r="$_sharedroot/xbuildroot/packages/$_buildbranch"
      d="$r/$name/$version/$release"
      test ".$_arch" = .amd64 && archdir=x86_64
      test ".$_arch" = .i386 && archdir=i386
      test ".$_arch" = .sparcv9 && archdir=sparc64
      if [ -d $d/$archdir ]
      then
         $ECHO "The build already exist. Remove $d/$archdir to allow rebuild."
         exit 1
      fi

      newdir "$_xbrootdir"
    fi

    find_make_pid > $_xbrootdir/pid
    if [ -s sources ]
    then
        makedir "$_sourcedir"
    else
        makedir "$_sourcedir/$_source"
    fi
    return 0
}

prep_execute()
{
    $ECHO "prep task"
    (
        copysources
    )
    test $? -ne 0 && exit 1
    (
        downloadsources
    )
    test -d "$_sourcedir/$_source" || xbexit 1 "cannot find \`$_source' directory"
    (
        applypatches
    )
    test $? -ne 0 && exit 1
    (
        configsources
    )
    test $? -ne 0 && exit 1
    (
        copyosfiles
        cd "$_sourcedir"
        gensourceinfo $name
        cd ..
        cp -R SOURCES $name
        cd $name
        rm -f *.tar.* *.tgz *.rpm *.zip  2>/dev/null || true
        rm -f "$_outputdir/$NVR.src.zip" 2>/dev/null || true
        cd ..
        test ".$has_verbose" = .yes && q="" || q=q
        zip -9zry$q "$_outputdir/$NVR.src.zip" $name < /tmp/.zipinfo
        rm -rf $name 2>/dev/null || true
    )
    return 0
}

