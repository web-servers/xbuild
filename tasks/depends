#!/bin/sh
# Copyright(c) 2012 Red Hat, Inc.
#
# This is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library in the file COPYING.LIB;
# if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
#
# @author Mladen Turk
#
# Handles build dependencies
#


# Execute hooks
depends_prepare()
{
    $ECHO "depends prepare in: \`$_rootdir'"
    if [ $_rootdir != / ]
    then
        newdir "$_rootdir"
    fi
    newdir "$_buildsrcsdir"
    rm -f /tmp/.zipdeps 2>/dev/null || true
    if [ ".$_host_os" = .solaris -o ".$_host_os" = .hpux ]
    then
        p="$_sharedroot/xbuildroot/packages/$_buildbranch"
        newdir "$_buildreqsdir"
        (
        IFS=$__lf
        d=`grep -i -e "^#${_os_c}-buildrequires:" -e "^#unx-buildrequires:" $specfile | sed "s/#.*-buildrequires: //"`
        for i in $d
        do
            $ECHO "Dependency: \`$i'"
            a="`cat $p/.${_os_c}repo | grep "^$i"' .*'"$dist" | head -1`"
            if [ ".$a" = . ]
            then
                echo "Missing dependency: \`$i'"
                echo ""
                exit 1
            fi
            v="`echo $a | awk '{print $2;}'`"
            r="`echo $a | awk '{print $3;}'`"
            if [ ! -f "$p/$i/$v/$r/$_arch/$i-$v-$r.$_arch.zip" ]
            then
                echo "Missing dependency file: \`$i-$v-$r.$_arch.zip'"
                echo ""
                exit 1
            fi
            cp "$p/$i/$v/$r/$_arch/$i-$v-$r.$_arch.zip" "$_buildreqsdir"
            cp "$p/$i/$v/$r/$_arch/$i-devel-$v-$r.$_arch.zip" "$_buildreqsdir" 2>/dev/null
            if [ -f "$p/$i/$v/$r/src/$i-$v-$r.src.zip" ]
            then
                $ECHO "Source: \`$i'"
                cp "$p/$i/$v/$r/src/$i-$v-$r.src.zip" "$_buildreqsdir"
            fi
        done
        return 0;
        )
        test $? -ne 0 && exit 1
    fi
    (
        test ".$brew_name" = . && brew_name=$name
        test ".$brew_arch" = . && a=noarch || a=$brew_arch
        IFS=$__lf
        d=`grep -i '^#rpm-buildrequires:' $specfile | sed 's/#rpm-buildrequires: //'`
        for i in $d
        do
            if [ ".$brew_release" = . ]
            then
                echo "Missing '%define brew_release ...' from spec file"
                exit 1
            fi
            if [ ! -d "$_buildreqsdir" ]
            then
                mkdir -p $_buildreqsdir 2>/dev/null || true
            fi
            (
                if [ ".$i" = ".sources" ]
                then
                    i=$brew_name
                    a=src
                fi
                p="$brew_name/$version/$brew_release/$a/$i-$version-$brew_release.$a.rpm"
                $ECHO "Dependency: \`$p'"
                cd $_buildreqsdir
                if [ -r $i-$version-$brew_release.$a.rpm ]
                then
                    $ECHO "Reusing: \`$p'"
                    return 0
                else
                    curl -qkLORsSf http://download.eng.bos.redhat.com/brewroot/packages/$p
                    return $?
                fi
            )
            test $? -ne 0 && exit 1
        done
        return 0;
    )
    return $?
}

depends_execute()
{
    $ECHO "depends execute in: \`$_buildreqsdir'"
    (
        cd "$_rootdir"
        test -d "$_buildreqsdir" || return 0
        if [ .$has_verbose = .yes ]
        then
            echo "--- content of buildrequires ---"
            tree "$_buildreqsdir" 2>/dev/null
        fi
        $ECHO "Finding .rpm file dependencies ..."
        d="`find "$_buildreqsdir" -name '*.rpm' -type f 2>/dev/null`"
        if [ ".$d" != . ]
        then
            for i in $d
            do
                IFS=$__ifs
                case "$i" in
                    *.$_arch.*  )
                        $ECHO "Archive: \`$i'"
                        unrpm "$i" .
                    ;;
                    *.noarch.*  )
                        $ECHO "Archive: \`$i'"
                        unrpm "$i" .
                    ;;
                    *.src.*  )
                        $ECHO "Sources: \`$i'"
                        unrpm "$i" $brew_name.src.rpm
                        continue
                    ;;
                esac
                z=`basename "$i" | sed "s;\.ep[0-9].*;;"`
                z=`echo $z | grep -v '\devel' | grep -v '\-src-'`
                test ".$z" != . && echo "$z" >>/tmp/.zipdeps
            done
        fi
        $ECHO "Finding .zip file dependencies ..."
        IFS=$__lf
        d="`find "$_buildreqsdir" -name '*.'$_arch'.zip' -o -name '*.noarch.zip' -type f 2>/dev/null`"
        if [ ".$d" != . ]
        then
            test .$has_verbose = .yes && q="" || q="q"
            for i in $d
            do
                IFS=$__ifs
                case "$i" in
                    *xbuild-*  )
                        continue
                    ;;
                    *-sources.*)
                        continue
                    ;;
                    *-spec.*   )
                        continue
                    ;;
                    *.src.zip  )
                        continue
                    ;;
                    *.$_arch.* )
                        unzip -o$q "$i"
                    ;;
                    *.noarch.* )
                        unzip -o$q "$i"
                    ;;
                esac
                z=`basename "$i" | sed "s;\.hpux[0-9].*;;" | sed "s;\.sun[0-9].*;;" | sed "s;\.win[0-9].*;;"`
                z=`echo $z | grep -v '\-devel'`
                test ".$z" != . && echo "$z" >>/tmp/.zipdeps
            done
        fi
        $ECHO "Finding .tgz file dependencies ..."
        d="`find "$_buildreqsdir" -name '*.'$_arch'.tar.*' -type f 2>/dev/null`"
        if [ ".$d" != . ]
        then
            test .$has_verbose = .yes && q="v" || q=""
            for i in $d
            do
                IFS=$__ifs
                case "$i" in
                    *.gz  )
                        $ECHO "gz archive: \`$i'"
                        $__gzip -cd "$i" | $__tar -xf$q -
                    ;;
                    *.bz2 )
                        $ECHO "bz archive: \`$i'"
                        $__bzip2 -cd "$i" | $__tar -xf$q -
                    ;;
                    *.xz )
                        $ECHO "xz archive: \`$i'"
                        $__xz -cd "$i" | $__tar -xf$q -
                    ;;
                esac
            done
        fi
        $ECHO "Finding .src.zip dependencies ..."
        IFS=$__lf
        d="`find "$_buildreqsdir" -name '*.src.zip' -type f 2>/dev/null`"
        if [ ".$d" != . ]
        then
            cd "$_buildsrcsdir"
            test .$has_verbose = .yes && q="" || q="q"
            for i in $d
            do
                IFS=$__ifs
                unzip -o$q "$i"
            done
        fi
        $ECHO "Finished ..."
        return 0;
    )
}

