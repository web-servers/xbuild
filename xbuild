#!/bin/bash
# Copyright(c) 2021 Red Hat, Inc.
#
# This is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library in the file COPYING.LIB;
# if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
#
# @author Mladen Turk
#
# Main xbuild file
# You will almost sure wish to call this file
#
set +e +x

p=`basename $0`
r=`dirname $0`
XB_ROOTDIR="`cd \"$r\" && pwd`"
XB_INCLUDE="$XB_ROOTDIR/include"
include()
{
    if [ -r $XB_ROOTDIR/share/$1 ]
    then
        . $XB_ROOTDIR/share/$1
    fi
}

usetask()
{
    . $XB_ROOTDIR/tasks/$1
}

include stddefs
for o
do
    case "$o" in
    --enable-*)
        a=`echo "$o" | sed -e 's/--enable-//' -e 's/-/_/'`
        case "$a" in
            *=* )
                v=`echo "$a" | sed 's/^[_a-zA-Z0-9]*=//'`
                a=`echo "$a" | sed 's/=.*//'`
            ;;
            *   )
                v='yes'
            ;;
        esac
        eval has_${a}=$v
        eval has_${a}_set=yes
        shift
        continue
    ;;
    --disable-*)
        a=`echo "$o" | sed -e 's/--disable-//' -e 's/-/_/'`
        case "$a" in
            *=* )
                a=`echo "$a" | sed 's/=.*//'`
            ;;
        esac
        eval has_${a}=no
        eval has_${a}_set=yes
        shift
        continue
    ;;
    *=*) a=`echo "$o" | sed 's/^[-_a-zA-Z0-9]*=//'`
    ;;
    *  ) a=''
    ;;
    esac
    case "$o" in
        --verbose|-v )
            ECHO=echo
            has_verbose=yes
            shift
        ;;
        --debug      )
            has_maintainer_mode=yes
            shift
        ;;
        --force      )
            has_force=yes
            shift
        ;;
        --requires=* )
            requires="$a"
            shift
        ;;
        --buildrequires=*| --requires=)
            buildrequires="$a"
            shift
        ;;
        --name=*     )
            name="$a"
            shift
        ;;
        --version=*  )
            version="$a"
            shift
        ;;
        --release=*  )
            release="$a"
            shift
        ;;
        --specfile=* )
            specfile="$a"
            shift
        ;;
        --libdir=*  )
            _libdir="$a"
            shift
        ;;
        --bindir=*  )
            _bindir="$a"
            shift
        ;;
        --sbindir=*  )
            _sbindir="$a"
            shift
        ;;
        --prefix=*  )
            _prefix="$a"
            shift
        ;;
        --sharedroot=*  )
            _sharedroot="$a"
            shift
        ;;
        --arch=*    )
            _arch="$a"
            test ".$a" = .amd64 && _arch=x86_64
            test ".$a" = .sparcv9 && _arch=sparc64
            shift
        ;;
        --os=*      )
            _os="$a"
            shift
        ;;
        --dist=*    )
            test ".$a" = .disable && dist="" || dist="$a"
            shift
        ;;
        --host-os=* )
            _host_os="$a"
            shift
        ;;
        --host-cpu=*)
            _host_cpu="$a"
        ;;
        --host=*)
            _host="$a"
            shift
        ;;
        --with-java=*)
            JAVA_HOME="$a"
            shift
        ;;
        --with-*=*)
            n=`echo "$o" | sed -e 's/--with-/_/' -e 's/=.*//' -e 's/-/_/'`
            eval "$n=\"$a\""
            shift
        ;;
        --help|-* )
        cat 1>&2 << EOH
XBuild version $XB_VERSION
Copyright (C) $__year Red Hat, Inc.

EOH
        test $o != --help && echo "Error: unknown option \`$o'" 1>&2
        cat 1>&2 << EOH
Options are
  --help                           this screen
  -v, --verbose                    turn on verbosity
  --debug                          turn on maintenance mode for this shell
                                   Note that this will produce huge amount
                                   of data on output stream.
  --dist=<.suffix|disable>         set distribution name suffix. disable
                                   will disable dist suffix.
  --name=<name>                    set package name
  --release=<release>              set release number
  --version=<version>              set package version


EOH
        exit 1
        ;;
        * )
            break
        ;;
    esac
done
test .$has_maintainer_mode = .yes && set -x
export XB_ROOTDIR XB_INCLUDE ECHO
include system
include setup
include setup.$_os

task=$1
shift
test ".$task" = . && task=make
# Parse tasks
case ".$task" in
    .make       )
        usetask prep
        usetask depends
        usetask build
        usetask dist
    ;;
    .build      )
        usetask build
    ;;
    .depends    )
        usetask depends
    ;;
    .dist       )
        usetask dist
    ;;
    .prep       )
        usetask prep
    ;;
    .publish    )
        usetask publish
    ;;
    .version    )
        cat << EOH
XBuild $XB_VERSION
Copyright (C) $__year Red Hat, Inc.
This program may be freely redistributed under the terms of the GNU LGPL

Written by Mladen Turk
EOH
        exit 0
    ;;
    *           )
        cat 1>&2 << EOH
XBuild version $XB_VERSION
Copyright (C) $__year Red Hat, Inc.

EOH
        if [ ".$1" = . ]
        then
            echo "Usage: xbuild [OPTION]... task" 1>&2
        else
            echo "Error: \`$task' is an invalid task." 1>&2
        fi
        cat 1>&2 << EOH
Standard tasks
  version                          display XBuild version info
  prep                             check out package sources
  depends                          setup dependencies
  build                            perfom build
  dist                             create platform package
  make                             perfom sources-depends-build tasks

EOH
        exit 1
    ;;
esac
$ECHO "$task started"
include specfile
test ".$name" = . && xbexit 1 "missing package name"

if [ .$task = .make ]
then
    (
        prep_prepare && prep_execute
    )
    test $? -ne 0 && xbexit 1 "prep failed"
    (
        depends_prepare && depends_execute
    )
    test $? -ne 0 && xbexit 1 "depends failed"
    (
        build_prepare && build_execute
    )
    test $? -ne 0 && xbexit 1 "build failed"
    (
        dist_prepare && dist_execute
    )
    test $? -ne 0 && xbexit 1 "dist failed"
else
    ( eval ${task}_prepare "$@" )
    test $? -ne 0 && xbexit 1 "$task prepare failed"
    ( eval ${task}_execute "$@" )
    test $? -ne 0 && xbexit 1 "$task execute failed"
fi

$ECHO "$task finished."
exit 0
